{
    // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
    // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
    // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
    // used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
    // Placeholders with the same ids are connected.
    // Example:
    // "Print to console": {
    //     "scope": "javascript,typescript",
    //     "prefix": "log",
    //     "body": [
    //     "console.log('$1');",
    //     "$2"
    //     ],
    //     "description": "Log output to console"
    // }
    "React Request Hook": {
		"prefix": "react-request-hook",
		"body": [
		"export const use$1 = () => {",
		"    const reqRef = useRef();",
		"    const [error, setError] = useState(null);",
		"    const [loading, setLoading] = useState(false);",
		"    const [data, setData] = useState(null);",
		"",
		"    const get$1 = useCallback(async () => {",
		"        if (reqRef.current) {",
		"            return;",
		"        }",
		"",
		"        setError(null);",
		"        setLoading(true);",
		"",
		"        try {",
		"            reqRef.current = true;",
		"            const response = await $2;",
		"            setData(response);",
		"        } catch (err) {",
		"            setError(err.statusCode === 0 ? feedback.connection : feedback.server);",
		"        } finally {",
		"            reqRef.current = null;",
		"            setLoading(false);",
		"        }",
		"    }, []);",
		"",
		"    return { loading, error, data, get$1 };",
		"};"
		],
		"description": "React Request Hook"
	}
}